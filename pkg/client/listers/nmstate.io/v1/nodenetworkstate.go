/*
Copyright 2018 The nmstate Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/nmstate/k8s-node-net-conf/pkg/apis/nmstate.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeNetworkStateLister helps list NodeNetworkStates.
type NodeNetworkStateLister interface {
	// List lists all NodeNetworkStates in the indexer.
	List(selector labels.Selector) (ret []*v1.NodeNetworkState, err error)
	// NodeNetworkStates returns an object that can list and get NodeNetworkStates.
	NodeNetworkStates(namespace string) NodeNetworkStateNamespaceLister
	NodeNetworkStateListerExpansion
}

// nodeNetworkStateLister implements the NodeNetworkStateLister interface.
type nodeNetworkStateLister struct {
	indexer cache.Indexer
}

// NewNodeNetworkStateLister returns a new NodeNetworkStateLister.
func NewNodeNetworkStateLister(indexer cache.Indexer) NodeNetworkStateLister {
	return &nodeNetworkStateLister{indexer: indexer}
}

// List lists all NodeNetworkStates in the indexer.
func (s *nodeNetworkStateLister) List(selector labels.Selector) (ret []*v1.NodeNetworkState, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeNetworkState))
	})
	return ret, err
}

// NodeNetworkStates returns an object that can list and get NodeNetworkStates.
func (s *nodeNetworkStateLister) NodeNetworkStates(namespace string) NodeNetworkStateNamespaceLister {
	return nodeNetworkStateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeNetworkStateNamespaceLister helps list and get NodeNetworkStates.
type NodeNetworkStateNamespaceLister interface {
	// List lists all NodeNetworkStates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.NodeNetworkState, err error)
	// Get retrieves the NodeNetworkState from the indexer for a given namespace and name.
	Get(name string) (*v1.NodeNetworkState, error)
	NodeNetworkStateNamespaceListerExpansion
}

// nodeNetworkStateNamespaceLister implements the NodeNetworkStateNamespaceLister
// interface.
type nodeNetworkStateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeNetworkStates in the indexer for a given namespace.
func (s nodeNetworkStateNamespaceLister) List(selector labels.Selector) (ret []*v1.NodeNetworkState, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeNetworkState))
	})
	return ret, err
}

// Get retrieves the NodeNetworkState from the indexer for a given namespace and name.
func (s nodeNetworkStateNamespaceLister) Get(name string) (*v1.NodeNetworkState, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodenetworkstate"), name)
	}
	return obj.(*v1.NodeNetworkState), nil
}
